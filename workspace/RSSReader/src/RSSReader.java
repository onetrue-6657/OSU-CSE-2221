import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file. (CSE 2221 - Project 4)
 *
 * @author Zheng Ni
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel")
                : "" + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        int title = getChildElement(channel, "title"),
                description = getChildElement(channel, "description"),
                link = getChildElement(channel, "link");

        out.println("<html>");
        out.println("<head>");
        out.println("<title>");
        if (title == -1) {
            out.println("Empty Title");
        } else {
            out.println(channel.child(title).child(0));
        }
        // If <title> does not have a child, we only need to print "Empty Title".
        out.println("</title>\r\n" + "</head>\r\n" + "<body>");
        out.println(" <h1>" + "<a href=\"" + channel.child(link).child(0) + "\">"
                + channel.child(title).child(0) + "</a></h1>");
        out.print(" <p>");
        if (description == -1) {
            out.print("No description");
        } else {
            out.print(channel.child(description).child(0));
        }
        // If <description> does not have a child, we only need to print "No description".
        out.println("</p>");
        out.println(" <table border = \"1\">");
        // Prints the table element.
        out.println("  <tr>\r\n" + "   <th>Date</th>\r\n" + "   <th>Source</th>\r\n"
                + "   <th>News</th>\r\n" + "  </tr>");
        // Prints the table headers: Date | Source | News
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println(" </table>\r\n" + "</body>\r\n" + "</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        boolean appeared = false;
        int out = -1;
        for (int i = 0; i < xml.numberOfChildren(); i++) {
            if (xml.child(i).label().equals(tag) && !appeared) {
                out = i;
                appeared = true;
                // Finds the FIRST occurrence of the given tag.
            }
        } // Iterates the XMLTree's every child tag.
        return out;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item")
                : "" + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        int date = getChildElement(item, "pubDate"),
                source = getChildElement(item, "source"),
                childTitle = getChildElement(item, "title"),
                childLink = getChildElement(item, "link");
        out.println("  <tr>");
        out.print("   <td>");
        if (date == -1 || item.child(date).numberOfChildren() <= 0) {
            out.print("No date available");
        } else {
            out.print(item.child(date).child(0));
        }
        // Same as above.
        out.println("</td>");
        out.print("   <td>");
        if (source == -1 || item.child(source).numberOfChildren() <= 0) {
            out.print("No source available");
        } else {
            out.print("<a href=\"" + item.child(source).attributeValue("url") + "\">");
            out.print(item.child(source).child(0));
            out.print("</a>");
            // Gives the source a link to go.
        }
        // Same as above.
        out.println("</td>");
        out.print("   <td>");
        if (childTitle == -1 || item.child(childTitle).numberOfChildren() <= 0) {
            out.print("No title available");
        } else {
            out.print("<a href=\"" + item.child(childLink).child(0) + "\">");
            out.print(item.child(childTitle).child(0));
            out.print("</a>");
        }
        // Same as above.
        out.println("</td>");
        out.println("  </tr>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.print("Enter the URL of an RSS 2.0 news feed: ");
        String url = in.nextLine();
        out.print("What name do you want for the html file? ");
        String name = in.nextLine();
        SimpleWriter fileOut = new SimpleWriter1L(name + ".html");
        /**
         * Creates the output SimpleWriter method, printing everything in the
         * html file. If I input the name as "RSSReader", it will generate a
         * file called "RSSReader.html" in the project folder, which can be used
         * directly.
         */

        XMLTree xml = new XMLTree1(url);
        XMLTree channel = xml.child(0);

        outputHeader(channel, fileOut);
        for (int i = 0; i < channel.numberOfChildren(); i++) {
            if (channel.child(i).label().equals("item")) {
                processItem(channel.child(i), fileOut);
            }
        } // Iterates every <item> XMLTree and process the item trees.
        outputFooter(fileOut);

        in.close();
        out.close();
    }

}
